class Solution:
    def goodTriplets(self, nums1: List[int], nums2: List[int]) -> int:
        return self.solve(nums1, nums2)

    def solve(self, nums1: List[int], nums2: List[int]):
        n = len(nums1)
        pos = {x: i for i, x in enumerate(nums1)}
        pos2 = [pos[x] + 1 for x in nums2]         # +1 here for bit processing
        # print(pos2)

        tree = Fenwick(pos2)
        ans = 0
        for i, x in enumerate(pos2):
            # pre number < x
            cntLeftSmaller = tree.query(x - 1)
            
            # pre number > x
            cntLeftLarger = i - cntLeftSmaller

            # post number > x
            #[0, n-1]   [x+1, n-1]
            cntRightLarger = (n - x) - cntLeftLarger  # totalLarger - leftLarger
            
            ans += cntLeftSmaller * cntRightLarger

            # update the tree
            tree.update(x, 1)
        
        return ans

class Fenwick:
    def __init__(self, nums: int):
        n = len(nums)
        self.tree = [0] * (n + 1)
    
    def update(self, idx: int, val: int):
        while idx < len(self.tree):
            self.tree[idx] += val
            idx += idx & -idx
    
    def query(self, idx: int):
        res = 0
        while idx > 0:
            res += self.tree[idx]
            idx -= idx & -idx
        return res