class Solution:
    def minTimeToReach(self, moveTime: List[List[int]]) -> int:
        m = len(moveTime)
        n = len(moveTime[0])
        visited = [[False]*n for _ in range(m)]
        visited[0][0] = True
        pq = [(0,0,0)]

        while pq:
            curr_time, i, j = heapq.heappop(pq)
            if i == m-1 and j == n-1:
                return curr_time
            for x,y in [(1,0), (0,1), (0,-1), (-1,0)]:
                new_r, new_c = i+x, j+y
                if new_r < 0 or new_r >= m or new_c < 0 or new_c >=n or visited[new_r][new_c]:
                    continue
                visited[new_r][new_c] = True
                next_time = max(curr_time, moveTime[new_r][new_c]) +1
                heapq.heappush(pq, (next_time, new_r, new_c))

        return 0             
        