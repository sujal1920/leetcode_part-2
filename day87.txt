class Solution:
    def spiralMatrix(self, m: int, n: int, head: ListNode) -> List[List[int]]:
        matrix = [[-1] * n for _ in range(m)]

        topRow, bottomRow = 0, m - 1
        leftCol, rightCol = 0, n - 1

        while head:

            for j in range(leftCol, rightCol + 1):
                if head:
                    matrix[topRow][j] = head.val
                    head = head.next
            topRow += 1


            for i in range(topRow, bottomRow + 1):
                if head:
                    matrix[i][rightCol] = head.val
                    head = head.next
            rightCol -= 1

      
            for j in range(rightCol, leftCol - 1, -1):
                if head:
                    matrix[bottomRow][j] = head.val
                    head = head.next
            bottomRow -= 1


            for i in range(bottomRow, topRow - 1, -1):
                if head:
                    matrix[i][leftCol] = head.val
                    head = head.next
            leftCol += 1

        return matrix



def format_output(result):
    return '[' + ','.join(str(row).replace(' ', '') for row in result) + ']'

def kdsmain():
    input_data = sys.stdin.read().strip()
    lines = input_data.splitlines()
    
    num_test_cases = len(lines) // 3
    results = []

    for i in range(num_test_cases):
        m = int(lines[i*3])
        n = int(lines[i*3 + 1])
        head_values = json.loads(lines[i*3 + 2])
        
        if not head_values:
            head = None
        else:
            head = ListNode(head_values[0])
            current = head
            for value in head_values[1:]:
                current.next = ListNode(value)
                current = current.next
        
        result = Solution().spiralMatrix(m, n, head)
        formatted_result = format_output(result)
        results.append(formatted_result)

    with open('user.out', 'w') as f:
        for result in results:
            f.write(f"{result}\n")

if __name__ == "__main__":
    kdsmain()
    exit(0)

#kartikdevsharmaa